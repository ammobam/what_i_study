# -*- coding: utf-8 -*-
"""선형 자료구조_코드구현.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SRvooRcBKUIwSC95XCBWkWYAkdzRvtWe

# 선형 자료구조

## 배열
### 문제 09.세 수의 합(p184)
- 배열을 입력 받아 합으로 0을 만들 수 있는 3개의 엘리먼트를 출력하라.
```
# 입력
nums = [-1, 0, 1, 2, -1, -4]
# 출력 예시
[[-1, 0, 1], [-1, -1, 2]]
```

### 방법 1 : 모든 조합에 대해 찾기
- 배열에서 요소 3개를 고르는 경우, 가능한 모든 조합을 리스트로 저장함
- 각 리스트에서 세 개 값의 합이 0인 경우만 선택함
"""

# 방법1
# 배열 입력
nums = [-1, 0, 1, 2, -1, -4]

# 배열에서 3개 요소를 묶어서 저장함
# 3개 요소의 합이 0인 경우만 출력

"""### 방법 2 : 배열의 길이를 줄여 나가며 찾기
- 배열을 오름차순으로 정렬함
- 가장 작은 값과 가장 큰 값의 합이 0보다 크거나 작은지 판단함
- 두 수의 합을 0과 비교하고, 선택하지 않은 수 중 가장 작거나 큰 값을 더함
    - 만약 두 수의 합이 0보다 크다면, 다음 수는 음수여야 세 수의 합이 0이 될 수 있음
    - 만약 두 수의 합이 0보다 작다면, 다음 수는 양수여야 세 수의 합이 0이 될 수 있음
- 세 수의 합을 0과 비교하고,
    - 세 수의 합이 0이 될 수 없는 경우는 가장 작거나 큰 값을 배열에서 제외함
    - 세 수의 합이 0인 경우에는 배열에 속한 가장 작은 값과 가장 큰 값을 제외함
- 이 과정을 배열의 길이가 3 이상인 경우에만 반복함
"""

# 방법2

# 배열 입력
nums = [-1, 0, 1, 2, -1, -4]

# 출력값 저장할 리스트 생성
zero_maker = []

# 배열 정렬하기
nums_sort = sorted(nums)


while len(nums_sort)>=3:
    print("반복 시 리스트 요소 확인:", nums_sort)

    # 배열에서 가장 왼쪽 값(최소값), 오른쪽 값(최대값) 두 값 더하기
    sum_two = nums_sort[0] + nums_sort[-1]

    # 두 수의 합이 0보다 크거나 같으면,
    if sum_two >= 0:
        print("\t- sum_two >= 0")
        # 남은 수에서 가장 왼쪽 값을 더함
        sum_three = sum_two + nums_sort[1]
        if sum_three == 0:
            # 세 수를 더한 값이 0인 경우 출력 리스트에 저장
            zero_maker.append([nums_sort[0], nums_sort[1], nums_sort[-1]])
            nums_sort.remove(nums_sort[0])
            nums_sort.remove(nums_sort[-1])
            print("\t==0:", nums_sort)
        elif sum_three > 0:
            nums_sort.remove(nums_sort[-1])
            print("\t>0:", nums_sort)
        else:
            nums_sort.remove(nums_sort[0])
            print("\t<0:", nums_sort)

    # 두 수의 합이 0보다 작으면,
    else:
        print("\t- sum_two < 0")
        # 남은 수에서 가장 오른쪽 값을 더함
        sum_three = sum_two + nums_sort[-2]
        if sum_three == 0:
            # 세 수를 더한 값이 0인 경우 출력 리스트에 저장
            zero_maker.append([nums_sort[0], nums_sort[-2], nums_sort[-1]])
            nums_sort.remove(nums_sort[0])
            nums_sort.remove(nums_sort[-1])
            print("\t==0: ", nums_sort)
        elif sum_three > 0:
            nums_sort.remove(nums_sort[-1])
            print("\t>0: ", nums_sort)
        else:
            nums_sort.remove(nums_sort[0])
            print("\t<0: ", nums_sort)

# 출력
print("답:", zero_maker)

"""#### 그 외 : list의 기능 탐구"""

help(list.remove)

# list에서 remove()는 1개씩 지울 수 있음
nums = [-1, 0, 1, 2, -1, -4]
nums.remove(nums[0])
nums.remove(nums[-1])
nums

# list에서 append() 안에 []로 묶어서 더해주면 중복 리스트로 추가됨
nums_sort = [-1, 0, 1, 2, -1, -4]
zero_maker=[]
zero_maker.append([nums_sort[0], nums_sort[-1], nums_sort[-2]])
zero_maker.append([nums_sort[0], nums_sort[-1], nums_sort[1]])
zero_maker

"""## 연결 리스트 (Linked List)
### 문제 16.두 수의 덧셈(p221)
- 역순으로 저장된 연결 리스트의 숫자를 더하라
```
# 입력
(2 -> 4 -> 3) + (5 -> 6 -> 4)
# 출력
7 -> 0 -> 8
```
- 342 + 465 = 807
- 먼저 입력된 숫자가 낮은 자리 숫자
- 각 자리의 숫자 합이 10 이상이 되면 다음 자리로 1 넘김
"""

# 문자열 입력
input_data = "(2 -> 4 -> 3) + (5 -> 6 -> 4)"

num_sum = 0

# "+" 기준으로 분할해서 식 단위로 입력 받기
for form_data in input_data.split("+"):

    # 식 안에서 숫자만 저장할 리스트 생성
    # 여기서 리스트 리셋됨
    num_list = []

    for data in form_data:
        #print(data, type(data))
        try:
            # 모두 str이므로 int로 타입 변환함
            num = int(data)
            num_list.append(num)
            #print(num_list)
        except:
            # int로 변환할 수 없는 data 처리함
            pass

    # 리스트에 입력 받은 순서대로 자릿수 곱해주고 num_sum에 누적으로 더함
    num_sum += num_list[0] + num_list[1]*10 + num_list[2]*100
    print(num_sum)

# 결과를 형식에 맞게 출력함
# 문자열로 변환하면
num_str = str(num_sum)
# 인덱스를 이용하여 출력할 수 있음
print(f"{num_str[2]} -> {num_str[1]} -> {num_str[0]}")

# 개선된 코드
# 4자리 수를 입력해도 처리 됨

# 문자열 입력
input_data = "(2 -> 4 -> 3) + (5 -> 6 -> 4)"
#input_data = "(2 -> 4 -> 3) + (5 -> 6 -> 4) + (1->1->4->7)"

num_sum=0
#num_sum = {}

# "+" 기준으로 분할해서 식 단위로 입력 받기
for form_data in input_data.split("+"):

    # 식 안에서 숫자만 저장할 리스트 생성
    num_list = []

    for data in form_data:
        try:
            # 모두 str이므로 int로 타입 변환함
            num = int(data)
            num_list.append(num)
            #print(num_list)

        except:
            # int로 변환할 수 없는 data 처리함
            pass

    # 리스트에 입력 받은 순서대로 자릿수 곱해주고 num_sum에 누적으로 더함
    lenght_num = len(num_list)
    for i in range(lenght_num):
        num_sum += num_list[i]*(10**i)
    print(num_sum)


# 결과를 형식에 맞게 출력함
num_str = str(num_sum)
length_str = len(num_str)
# 인덱스는 0부터 시작하고, 자릿수는 1부터 시작하니 range에 범위 줄 때 -1씩 처리함
# range()를 이용해서 마지막 파라미터를 -1로 설정하여 역순으로 출력
for i in range(length_str-1, -1, -1):
    # 마지막 출력은 화살표 없음
    if i != 0:
        print(f"{num_str[i]}", end=' -> ')
    else:
        print(f"{num_str[i]}")

num_str = str(num_sum)
length_str = len(num_str)
for i in range(length_str-1, -1, -1):
    #print(i)
    if i != 0:
        print(f"{num_str[i]}", end=' -> ')
    else:
        print(f"{num_str[i]}")

help(str.split)

#help(range)
#range(start, stop[, step]) -> range object

'''
        # 딕셔너리로 합 저장 - x
        # key를 자릿수로 받는 경우, 나중에 받은 값만 저장됨
        # key를 각 자릿수의 값, value를 자릿수으로 받는 경우, 같은 자릿수의 같은 값을 더하면 나중 값만 저장됨
        for i, num in enumerate(num_list):
        num_sum[num*(10**i)] = i 
        print(num_sum)
        '''